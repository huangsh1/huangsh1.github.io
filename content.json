{"meta":{"title":"H·stone","subtitle":"hahaha","description":"blog","author":"H·stone","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2021-01-25T08:30:32.793Z","updated":"2021-01-25T08:30:32.793Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人简介"}],"posts":[{"title":"allure测试报告在项目中的使用实践","slug":"report","date":"2021-01-22T10:11:56.000Z","updated":"2021-01-22T08:36:35.243Z","comments":true,"path":"2021/01/22/report/","link":"","permalink":"http://example.com/2021/01/22/report/","excerpt":"","text":"allure测试报告在自动化项目中的使用Allure Framework是一种灵活的轻量级多语言测试报告工具，美观且功能丰富 使用allure报告的前置条件 下载安装jdk，并配置好环境变量 下载allure安装包解压到文件夹（任意即可），并配置环境变量 pip install allure-pytest 使用： 运行项目时执行，指定生成的allure文件存放的文件夹 123456789if __name__ &#x3D;&#x3D; &#39;__main__&#39;: &quot;&quot;&quot; 1.清理配置信息 1.获取token，存储到cookie.json中供全局使用 &quot;&quot;&quot; clear() handel_token() pytest.main([&#39;-s&#39;, &#39;-q&#39;, &#39;--alluredir&#x3D;allure_results&#39;]) allure_results文件夹中生成了一堆json，txt等格式的莫名文件 1allure serve allure_results执行后会调起浏览器展示测试报告 此处需注意，只能使用火狐浏览器 1234567(venv) C:\\Users\\Administrator\\Desktop\\autotestAPI&gt;allure serve allure_resultsGenerating report to temp directory...Report successfully generated to C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2357441130466454662\\allure-reportStarting web server...2021-01-22 15:42:06.658:INFO::main: Logging initialized @2962ms to org.eclipse.jetty.util.log.StdErrLogServer started at &lt;http:&#x2F;&#x2F;192.168.0.101:5948&#x2F;&gt;. Press &lt;Ctrl+C&gt; to exit","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"allure","slug":"allure","permalink":"http://example.com/tags/allure/"}],"author":"H·stone"},{"title":"盐","slug":"hee","date":"2021-01-18T11:11:30.000Z","updated":"2021-01-21T06:06:29.362Z","comments":true,"path":"2021/01/18/hee/","link":"","permalink":"http://example.com/2021/01/18/hee/","excerpt":"","text":"遇上了一个账号需要改动密码，直接在数据库中改动了，发现无法登录，询问后端才知道，密码并不是简单的，直接sha256哈希userid出来的，经过了三重updata的拼接。python复现↓ 12345678910import hashlibuserID &#x3D; &#39;788802624700001609839882&#39;passWord &#x3D; &#39;f379eaf3c831b04de153469d1bec345e&#39;sha &#x3D; hashlib.sha256()sha.update(userID.encode(&#39;UTF-8&#39;))sha.update(passWord.encode(&#39;UTF-8&#39;))sha.update(userID.encode(&#39;UTF-8&#39;))print(sha.hexdigest()) 但是这个还有bug，哈希过程中并未加盐，hacker可以通过彩虹表反推，得到密码。 注册功能一般在数据库中存放的密码都是经过加密 简单的加密就是直接 sha256等等 ，但是如果通过彩虹表反推，是有可能被破解的。 所以一般会在生成 hash码的时候 加盐。 盐：出于预先防止黑客利用彩虹表反推盗用用户的密码账户信息，就需要给密码加‘盐’，其实简单来说，就是在hashlib模块中的md5加密方法时，传入一个你自己想给的盐，或者干脆随机生成（比较安全，将盐封装在类中） 彩虹表：彩虹表是一个用于加密散列函数逆运算的预先计算好的表, 为破解密码的散列值（或称哈希值、微缩图、摘要、指纹、哈希密文）而准备。一般主流的彩虹表都在100G以上。 这样的表常常用于恢复由有限集字符组成的固定长度的纯文本密码 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839import hashlib,random#注册storage&#x3D;&#123;&#125;def registration(u,p): if u in storage: return &#39;username occupied.please choose another username...&#39; else: storage[u]&#x3D;Users(u,p)#加密方法def get_md5(s): return hashlib.md5(s.encode(&#39;utf-8&#39;)).hexdigest()#登陆class Users(object): def __init__(self,username,password): self.username&#x3D;username #!!!!!!!注意盐是随机给的，每注册一个账号给一次盐，封装在Users类里面，在login函数里比较相等时， # a.salt是注册时封装好的盐，这时是固定的盐，所以只要账号密码对了就可以了。 self.salt&#x3D;&#39;&#39;.join([chr(random.randint(48,122)) for i in range(20)]) self.password&#x3D;get_md5(password+self.salt)def login(user,pw): if user not in storage.keys(): return &#39;wrong username&#39; else: a&#x3D;storage[user] if a.password&#x3D;&#x3D;get_md5(pw+a.salt): return &#39;succeeded&#39; else: return &#39;wrong password&#39;registration(&#39;mary&#39;,&#39;12345&#39;)registration(&#39;bob&#39;,&#39;aa895&#39;)registration(&#39;kirk&#39;,&#39;ba155&#39;)print(storage)print(login(&#39;mary&#39;,&#39;12345&#39;))","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"sha256","slug":"sha256","permalink":"http://example.com/tags/sha256/"}],"author":"H·stone"},{"title":"尝试Monkey测试","slug":"Monkeytest","date":"2020-09-17T01:56:26.000Z","updated":"2021-01-25T08:08:32.599Z","comments":true,"path":"2020/09/17/Monkeytest/","link":"","permalink":"http://example.com/2020/09/17/Monkeytest/","excerpt":"","text":"因为业务的关系一直聚焦于功能测试，接口测试，还没有尝试过跑Monkey脚本，试了一试。 参考： https://ww.cnblogs.com/lauren1003/p/6193277.html https://www.cnblogs.com/tekoyo/p/5288661.html 实践：monkey测试 首要条件：安装JDK 安装SDK 连接模拟器 –连接模拟器 mumu模拟器 1adb connect 127.0.0.1:7555 –查询应用程序 1adb shell dumpsys activity|find &quot;mFocusedActivity&quot; –点击1000下 1adb shell monkey -p com.thgy.uprotect 1000 –点击并生成日志 1adb shell monkey -p com.thgy.uprotect -s 500 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v -v -v 10000 &gt; D:\\monkey.txt","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"Monkey","slug":"Monkey","permalink":"http://example.com/tags/Monkey/"}],"author":"H·stone"},{"title":"弱网测试","slug":"weaknet","date":"2019-04-16T10:11:56.000Z","updated":"2021-01-21T05:51:00.695Z","comments":true,"path":"2019/04/16/weaknet/","link":"","permalink":"http://example.com/2019/04/16/weaknet/","excerpt":"","text":"ios弱网配置操作步骤： 进入开发者选项 选择NETWORK LINK CONDITIONER 将ENABLE打开 选择对应的网络环境，100%Loss、3G、Very Bad Network、WiFi等 自定义网络环境：Add a profile 备注：bandwidth是带宽，以k/s为单位；packet loss是丢包率，按百分比计算；delay延时，单位是毫秒，1000毫秒等于1秒。下面是我配的几个参考网络环境。 有的可以采用无线热点进行限速 charles如何设置弱网","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"弱网测试","slug":"弱网测试","permalink":"http://example.com/tags/%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/"}],"author":"H·stone"},{"title":"selenium中曾经遇上问题的地方","slug":"selenium","date":"2019-01-29T06:43:12.000Z","updated":"2021-01-25T07:45:24.864Z","comments":true,"path":"2019/01/29/selenium/","link":"","permalink":"http://example.com/2019/01/29/selenium/","excerpt":"","text":"关于元素互相遮挡元素块互有遮挡 会造成 click（）某个元素的时候，点击不到想要的元素 点击到别的地方去。 123sub_loc &#x3D; &#39;&#x2F;html&#x2F;body&#x2F;div[2]&#39; sub &#x3D; bp.By_xpath(sub_loc) driver.execute_script(&#39;$(arguments[0]).fadeOut()&#39;, sub) 直接找到遮盖了目标元素的元素块，直接隐藏。 显示/隐式等待隐式等待当查找元素没有立即出现的时候，隐式等待等待一段时间后再查找DOM，默认时间是0 123456from selenium import webdriverbrowser &#x3D; webdriver.Chrome()browser.implicitly_wait(10)browser.get(&quot;http:&#x2F;&#x2F;www.zhihu.com&#x2F;explore&quot;)input &#x3D; browser.find_element_by_class_name(&#39;zu-top-add-question&#39;)print(input) 显式等待指定一个等待条件，设置一个最长等待时间等带时间内满足了条件就正常返回 1234567891011121314from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECbrowser &#x3D; webdriver.Chrome()browser.get(&quot;http:&#x2F;&#x2F;www.taobao.com&#x2F;&quot;)wait &#x3D; WebDriverWait(browser,10)input &#x3D; wait.until(EC.presence_of _element_located((By.ID,&#39;q&#39;)))button &#x3D; wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,&#39;.btn-search&#39;)))print(input,button)​ def ByXpath_wait_time(self, loc_arg): &quot;&quot;&quot;元素获取方式之xpath-显示等待&quot;&quot;&quot; return WebDriverWait(self.driver, 15, 3).until(EC.presence_of_element_located((By.XPATH, loc_arg))) 执行javascript123456from selenium import webdriver​browser &#x3D; webdriver.Chrome()browser.get(&quot;http:&#x2F;&#x2F;www.taobao.com&#x2F;&quot;)browser.execute_script(&#39;window.scrollTo(0,document.body.scrollHeight)&#39;)browser.execute_script(&#39;alert(&quot;To Bottom&quot;)&#39;) #实现了页面从上到下拉​ chrome无头模式123chrome_options &#x3D; Options() chrome_options.add_argument(&#39;--headless&#39;) driver &#x3D; webdriver.Chrome(chrome_options&#x3D;chrome_options) selenium对于alert的处理（坑）1234567try: WebDriverWait(driver, 5).until(EC.alert_is_present(), &#39;Timed out waiting for alerts to appear&#39;) alert &#x3D; driver.switch_to.alert alert.accept() print(&quot;alert accepted&quot;) except TimeoutException: print(&quot;no alert&quot;) ==不是所有alert警告都是弹窗后瞬间警告，需要加上等待==","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"selenium","slug":"selenium","permalink":"http://example.com/tags/selenium/"},{"name":"ui自动化","slug":"ui自动化","permalink":"http://example.com/tags/ui%E8%87%AA%E5%8A%A8%E5%8C%96/"}],"author":"H·stone"}],"categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"allure","slug":"allure","permalink":"http://example.com/tags/allure/"},{"name":"sha256","slug":"sha256","permalink":"http://example.com/tags/sha256/"},{"name":"Monkey","slug":"Monkey","permalink":"http://example.com/tags/Monkey/"},{"name":"弱网测试","slug":"弱网测试","permalink":"http://example.com/tags/%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/"},{"name":"selenium","slug":"selenium","permalink":"http://example.com/tags/selenium/"},{"name":"ui自动化","slug":"ui自动化","permalink":"http://example.com/tags/ui%E8%87%AA%E5%8A%A8%E5%8C%96/"}]}