{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2021-01-21T01:29:33.966Z","updated":"2021-01-21T01:29:25.241Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2021-01-19T02:57:13.580Z","updated":"2021-01-20T08:49:31.182Z","comments":true,"path":"2021/01/19/hello-world/","link":"","permalink":"http://example.com/2021/01/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"关于账号加密","slug":"hee","date":"2021-01-18T11:11:30.000Z","updated":"2021-01-21T02:22:52.654Z","comments":true,"path":"2021/01/18/hee/","link":"","permalink":"http://example.com/2021/01/18/hee/","excerpt":"","text":"由于改动数据库密码导致无法登录学习到密码的加密 12345678910import hashlibuserID &#x3D; &#39;788802624700001609839882&#39;passWord &#x3D; &#39;f379eaf3c831b04de153469d1bec345e&#39;sha &#x3D; hashlib.sha256()sha.update(userID.encode(&#39;UTF-8&#39;))sha.update(passWord.encode(&#39;UTF-8&#39;))sha.update(userID.encode(&#39;UTF-8&#39;))print(sha.hexdigest()) 注册功能一般在数据库中存放的密码都是经过加密 简单的加密就是直接 sha256等等 ，但是如果通过彩虹表反推，是有可能被破解的。 所以一般会在生成 hash码的时候 加盐。 盐：出于预先防止黑客利用彩虹表反推盗用用户的密码账户信息，就需要给密码加‘盐’，其实简单来说，就是在hashlib模块中的md5加密方法时，传入一个你自己想给的盐，或者干脆随机生成（比较安全，将盐封装在类中） 彩虹表：彩虹表是一个用于加密散列函数逆运算的预先计算好的表, 为破解密码的散列值（或称哈希值、微缩图、摘要、指纹、哈希密文）而准备。一般主流的彩虹表都在100G以上。 这样的表常常用于恢复由有限集字符组成的固定长度的纯文本密码 示例代码： 123456789101112131415161718192021222324252627282930313233343536373839import hashlib,random#注册storage&#x3D;&#123;&#125;def registration(u,p): if u in storage: return &#39;username occupied.please choose another username...&#39; else: storage[u]&#x3D;Users(u,p)#加密方法def get_md5(s): return hashlib.md5(s.encode(&#39;utf-8&#39;)).hexdigest()#登陆class Users(object): def __init__(self,username,password): self.username&#x3D;username #!!!!!!!注意盐是随机给的，每注册一个账号给一次盐，封装在Users类里面，在login函数里比较相等时， # a.salt是注册时封装好的盐，这时是固定的盐，所以只要账号密码对了就可以了。 self.salt&#x3D;&#39;&#39;.join([chr(random.randint(48,122)) for i in range(20)]) self.password&#x3D;get_md5(password+self.salt)def login(user,pw): if user not in storage.keys(): return &#39;wrong username&#39; else: a&#x3D;storage[user] if a.password&#x3D;&#x3D;get_md5(pw+a.salt): return &#39;succeeded&#39; else: return &#39;wrong password&#39;registration(&#39;mary&#39;,&#39;12345&#39;)registration(&#39;bob&#39;,&#39;aa895&#39;)registration(&#39;kirk&#39;,&#39;ba155&#39;)print(storage)print(login(&#39;mary&#39;,&#39;12345&#39;))","categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"sha256","slug":"sha256","permalink":"http://example.com/tags/sha256/"}],"author":"H·stone"}],"categories":[{"name":"工作","slug":"工作","permalink":"http://example.com/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"sha256","slug":"sha256","permalink":"http://example.com/tags/sha256/"}]}